!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,r){!function(e,t){if(!g[e]||!b[e])return;for(var r in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,r)&&(p[r]=t[r]);0==--y&&0===v&&O()}(e,r),t&&t(e,r)};var r,n=!0,o="0e94af77abf0687fecfa",i=1e4,c={},s=[],a=[];function l(e){var t=k[e];if(!t)return E;var n=function(n){return t.hot.active?(k[n]?-1===k[n].parents.indexOf(e)&&k[n].parents.push(e):(s=[e],r=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),s=[]),E(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return E[e]},set:function(t){E[e]=t}}};for(var i in E)Object.prototype.hasOwnProperty.call(E,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(n,i,o(i));return n.e=function(e){return"ready"===d&&h("prepare"),v++,E.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===d&&(m[e]||D(e),0===v&&0===y&&O())}},n.t=function(e,t){return 1&t&&(e=n(e)),E.t(e,-2&t)},n}var u=[],d="idle";function h(e){d=e;for(var t=0;t<u.length;t++)u[t].call(null,e)}var f,p,w,y=0,v=0,m={},b={},g={};function P(e){return+e+""===e?+e:e}function A(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return n=e,h("check"),function(e){return e=e||1e4,new Promise(function(t,r){if("undefined"==typeof XMLHttpRequest)return r(new Error("No browser support"));try{var n=new XMLHttpRequest,i=E.p+""+o+".hot-update.json";n.open("GET",i,!0),n.timeout=e,n.send(null)}catch(e){return r(e)}n.onreadystatechange=function(){if(4===n.readyState)if(0===n.status)r(new Error("Manifest request to "+i+" timed out."));else if(404===n.status)t();else if(200!==n.status&&304!==n.status)r(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(n.responseText)}catch(e){return void r(e)}t(e)}}})}(i).then(function(e){if(!e)return h("idle"),null;b={},m={},g=e.c,w=e.h,h("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});p={};return D(0),"prepare"===d&&0===v&&0===y&&O(),t})}function D(e){g[e]?(b[e]=!0,y++,function(e){var t=document.getElementsByTagName("head")[0],r=document.createElement("script");r.charset="utf-8",r.src=E.p+""+e+"."+o+".hot-update.js",t.appendChild(r)}(e)):m[e]=!0}function O(){h("ready");var e=f;if(f=null,e)if(n)Promise.resolve().then(function(){return _(n)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var r in p)Object.prototype.hasOwnProperty.call(p,r)&&t.push(P(r));e.resolve(t)}}function _(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var r,n,i,a,l;function u(e){for(var t=[e],r={},n=t.slice().map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),i=o.id,c=o.chain;if((a=k[i])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(a.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var s=0;s<a.parents.length;s++){var l=a.parents[s],u=k[l];if(u){if(u.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([l]),moduleId:i,parentId:l};-1===t.indexOf(l)&&(u.hot._acceptedDependencies[i]?(r[l]||(r[l]=[]),f(r[l],[i])):(delete r[l],t.push(l),n.push({chain:c.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}t=t||{};var y={},v=[],m={},b=function(){console.warn("[HMR] unexpected require("+D.moduleId+") to disposed module")};for(var A in p)if(Object.prototype.hasOwnProperty.call(p,A)){var D;l=P(A);var O=!1,_=!1,j=!1,C="";switch((D=p[A]?u(l):{type:"disposed",moduleId:A}).chain&&(C="\nUpdate propagation: "+D.chain.join(" -> ")),D.type){case"self-declined":t.onDeclined&&t.onDeclined(D),t.ignoreDeclined||(O=new Error("Aborted because of self decline: "+D.moduleId+C));break;case"declined":t.onDeclined&&t.onDeclined(D),t.ignoreDeclined||(O=new Error("Aborted because of declined dependency: "+D.moduleId+" in "+D.parentId+C));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(D),t.ignoreUnaccepted||(O=new Error("Aborted because "+l+" is not accepted"+C));break;case"accepted":t.onAccepted&&t.onAccepted(D),_=!0;break;case"disposed":t.onDisposed&&t.onDisposed(D),j=!0;break;default:throw new Error("Unexception type "+D.type)}if(O)return h("abort"),Promise.reject(O);if(_)for(l in m[l]=p[l],f(v,D.outdatedModules),D.outdatedDependencies)Object.prototype.hasOwnProperty.call(D.outdatedDependencies,l)&&(y[l]||(y[l]=[]),f(y[l],D.outdatedDependencies[l]));j&&(f(v,[D.moduleId]),m[l]=b)}var x,R=[];for(n=0;n<v.length;n++)l=v[n],k[l]&&k[l].hot._selfAccepted&&R.push({module:l,errorHandler:k[l].hot._selfAccepted});h("dispose"),Object.keys(g).forEach(function(e){!1===g[e]&&function(e){delete installedChunks[e]}(e)});for(var H,B,M=v.slice();M.length>0;)if(l=M.pop(),a=k[l]){var I={},S=a.hot._disposeHandlers;for(i=0;i<S.length;i++)(r=S[i])(I);for(c[l]=I,a.hot.active=!1,delete k[l],delete y[l],i=0;i<a.children.length;i++){var T=k[a.children[i]];T&&((x=T.parents.indexOf(l))>=0&&T.parents.splice(x,1))}}for(l in y)if(Object.prototype.hasOwnProperty.call(y,l)&&(a=k[l]))for(B=y[l],i=0;i<B.length;i++)H=B[i],(x=a.children.indexOf(H))>=0&&a.children.splice(x,1);for(l in h("apply"),o=w,m)Object.prototype.hasOwnProperty.call(m,l)&&(e[l]=m[l]);var q=null;for(l in y)if(Object.prototype.hasOwnProperty.call(y,l)&&(a=k[l])){B=y[l];var L=[];for(n=0;n<B.length;n++)if(H=B[n],r=a.hot._acceptedDependencies[H]){if(-1!==L.indexOf(r))continue;L.push(r)}for(n=0;n<L.length;n++){r=L[n];try{r(B)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:B[n],error:e}),t.ignoreErrored||q||(q=e)}}}for(n=0;n<R.length;n++){var U=R[n];l=U.module,s=[l];try{E(l)}catch(e){if("function"==typeof U.errorHandler)try{U.errorHandler(e)}catch(r){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:r,originalError:e}),t.ignoreErrored||q||(q=r),q||(q=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||q||(q=e)}}return q?(h("fail"),Promise.reject(q)):(h("idle"),new Promise(function(e){e(v)}))}var k={};function E(t){if(k[t])return k[t].exports;var n=k[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==e,active:!0,accept:function(e,r){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._acceptedDependencies[e[n]]=r||function(){};else t._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._declinedDependencies[e[r]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=t._disposeHandlers.indexOf(e);r>=0&&t._disposeHandlers.splice(r,1)},check:A,apply:_,status:function(e){if(!e)return d;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var t=u.indexOf(e);t>=0&&u.splice(t,1)},data:c[e]};return r=void 0,t}(t),parents:(a=s,s=[],a),children:[]};return e[t].call(n.exports,n,n.exports,l(t)),n.l=!0,n.exports}E.m=e,E.c=k,E.d=function(e,t,r){E.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},E.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},E.t=function(e,t){if(1&t&&(e=E(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(E.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)E.d(r,n,function(t){return e[t]}.bind(null,n));return r},E.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return E.d(t,"a",t),t},E.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},E.p="",E.h=function(){return o},l(0)(E.s=0)}([function(e,t){var r,n;!function(e){e.LightBlue="cyan",e.DarkBlue="blue",e.Orange="orange",e.Yellow="yellow",e.LightGreen="green",e.Purple="purple",e.Red="red",e.Background="#eee"}(r||(r={})),function(e){e[e.A=0]="A",e[e.B=1]="B",e[e.C=2]="C",e[e.D=3]="D"}(n||(n={}));class o{constructor(e,t){this.column=e,this.row=t}}class i{constructor(e,t,r){this.color=e,this.orientation=t,this.tiler=r}toTiles(e){return this.tiler(e,this.orientation)}rotate(e){return new i(this.color,e?function(e){const{A:t,B:r,C:o,D:i}=n;switch(e){case t:return r;case r:return o;case o:return i;case i:return t}}(this.orientation):function(e){const{A:t,B:r,C:o,D:i}=n;switch(e){case t:return i;case r:return t;case o:return r;case i:return o}}(this.orientation),this.tiler)}}function c(e,t){const r=Array();return t.forEach((t,n)=>{t.forEach((t,i)=>{t&&r.push(new o(e.column+i,e.row+n))})}),r}const s=[function(){return new i(r.LightBlue,n.A,function(e,t){switch(t){case n.A:return c(e,[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]]);case n.B:return c(e,[[0,1,0,0],[0,1,0,0],[0,1,0,0],[0,1,0,0]]);case n.C:return c(e,[[0,0,0,0],[0,0,0,0],[1,1,1,1],[0,0,0,0]]);case n.D:return c(e,[[0,0,1,0],[0,0,1,0],[0,0,1,0],[0,0,1,0]])}})},function(){return new i(r.DarkBlue,n.A,function(e,t){switch(t){case n.A:return c(e,[[1,0,0],[1,1,1],[0,0,0]]);case n.B:return c(e,[[0,1,1],[0,1,0],[0,1,0]]);case n.C:return c(e,[[0,0,0],[1,1,1],[0,0,1]]);case n.D:return c(e,[[0,1,0],[0,1,0],[1,1,0]])}})},function(){return new i(r.Orange,n.A,function(e,t){switch(t){case n.A:return c(e,[[0,0,1],[1,1,1],[0,0,0]]);case n.B:return c(e,[[0,1,0],[0,1,0],[0,1,1]]);case n.C:return c(e,[[0,0,0],[1,1,1],[1,0,0]]);case n.D:return c(e,[[1,1,0],[0,1,0],[0,1,0]])}})},function(){return new i(r.Yellow,n.A,function(e,t){return c(e,[[1,1],[1,1]])})},function(){return new i(r.LightGreen,n.A,function(e,t){switch(t){case n.A:return c(e,[[0,1,1],[1,1,0],[0,0,0]]);case n.B:return c(e,[[0,1,0],[0,1,1],[0,0,1]]);case n.C:return c(e,[[0,0,0],[0,1,1],[1,1,0]]);case n.D:return c(e,[[1,0,0],[1,1,0],[0,1,0]])}})},function(){return new i(r.Purple,n.A,function(e,t){switch(t){case n.A:return c(e,[[0,1,0],[1,1,1],[0,0,0]]);case n.B:return c(e,[[0,1,0],[0,1,1],[0,1,0]]);case n.C:return c(e,[[0,0,0],[1,1,1],[0,1,0]]);case n.D:return c(e,[[0,1,0],[1,1,0],[0,1,0]])}})},function(){return new i(r.Red,n.A,function(e,t){switch(t){case n.A:return c(e,[[1,1,0],[0,1,1],[0,0,0]]);case n.B:return c(e,[[0,0,1],[0,1,1],[0,1,0]]);case n.C:return c(e,[[0,0,0],[1,1,0],[0,1,1]]);case n.D:return c(e,[[0,1,0],[1,1,0],[1,0,0]])}})}],a=new class{constructor(e=10,t=20){this.columns=e,this.rows=t,this.cells=new Array(t);for(let r=0;r<t;r++)this.cells[r]=new Array(e)}addPiece(e,t){const r=e.toTiles(t);return!!this.canAdd(r)&&(this.update(r,e),!0)}remove(e,t){const r=e.toTiles(t);this.update(r,null)}deleteRow(e){this.cells[e].forEach((e,t,r)=>{r[t]=null});for(let t=e-1;t>=0;t--)this.cells[t].forEach((e,r)=>{this.cells[t+1][r]=e})}colorOf(e,t){const r=this.cells[t][e];return r&&r.color}findFullRows(){const e=e=>{let t=0;for(let r=0;r<e.length;r++){const n=e[r];null!==n&&void 0!==n&&t++}return t===e.length},t=[];for(let r=0;r<this.cells.length;r++)e(this.cells[r])&&t.push(r);return t}canAdd(e){return e.every(({column:e,row:t})=>e>=0&&e<this.columns&&t>=0&&t<this.rows&&null==this.cells[t][e])}update(e,t){e.forEach(({column:e,row:r})=>{this.cells[r][e]=t})}},l=new class{constructor(e=30,t){this.tilePx=e,this.board=t;const{columns:r,rows:n}=t;this.canvas=document.createElement("canvas"),this.canvas.setAttribute("width",(e*r).toString()),this.canvas.setAttribute("height",(e*n).toString()),this.ctx=this.canvas.getContext("2d")}render(e=[],t=1){const{columns:n,rows:o}=this.board,{tilePx:i,ctx:c}=this;for(let s=0;s<o;s++)for(let o=0;o<n;o++){let n=this.board.colorOf(o,s);c.beginPath(),c.clearRect(o*i,s*i,i,i),c.rect(o*i,s*i,i,i),n?(-1!==e.indexOf(s)?c.globalAlpha=t:c.globalAlpha=1,c.fillStyle=n,c.strokeStyle="rgba(0, 0, 0, 0.5)"):(c.fillStyle=r.Background,c.strokeStyle="rgba(255, 255, 255, 0.5)"),c.fill(),c.stroke(),c.closePath()}}}(30,a),u=new class{constructor(e,t,r){this.board=e,this.renderer=t,this.pieces=r,this.lastTickTime=0,this.currentPeriodMillis=800,this.dropping=!1,this.fullRows=[]}start(){const e=this;window.requestAnimationFrame(function t(){e.tick(),window.requestAnimationFrame(t)})}tick(){if(this.fullRows.length>0)if(this.fullRowAlpha-=.04,this.fullRowAlpha>0)this.renderer.render(this.fullRows,this.fullRowAlpha);else{for(let e of this.fullRows)this.board.deleteRow(e);this.fullRows=[],this.renderer.render()}else{const e=Date.now(),t=this.dropping?20:this.currentPeriodMillis;e-this.lastTickTime>=t&&(this.currentPiece?this.advance():this.newPiece(),this.renderer.render(),this.lastTickTime=e)}}advance(){const{column:e,row:t}=this.currentCenter,r=new o(e,t+1);this.updateCurrent(this.currentPiece,r)||(this.fullRows=this.board.findFullRows(),0==this.fullRows.length?this.newPiece():this.fullRowAlpha=1)}newPiece(){this.dropping=!1;const e=this.randomPiece();this.addPiece(e,new o(4,0))}addPiece(e,t){this.board.addPiece(e,t)&&(this.currentPiece=e,this.currentCenter=t)}rotate(e){if(this.currentPiece&&!this.dropping){const t=this.currentPiece.rotate(e);this.updateCurrent(t,this.currentCenter)}}shift(e){if(this.currentPiece&&!this.dropping){const{column:t,row:r}=this.currentCenter,n=new o(t+(e?1:-1),r);this.updateCurrent(this.currentPiece,n)}}drop(){this.dropping=!0}updateCurrent(e,t){return this.board.remove(this.currentPiece,this.currentCenter),this.board.addPiece(e,t)?(this.currentPiece=e,this.currentCenter=t,this.renderer.render(),!0):(this.board.addPiece(this.currentPiece,this.currentCenter),!1)}randomPiece(){return this.pieces[Math.floor(Math.random()*this.pieces.length)]()}}(a,l,s);document.body.appendChild(l.canvas),l.render(),window.game=u,document.addEventListener("keydown",e=>{switch(e.key){case"ArrowUp":u.rotate(!1);break;case"ArrowDown":u.rotate(!0);break;case"ArrowLeft":u.shift(!1);break;case"ArrowRight":u.shift(!0);break;case" ":u.drop()}}),u.start()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,